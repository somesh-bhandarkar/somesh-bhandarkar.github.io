<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cryptography on </title>
    <link>https://somesh-bhandarkar.github.io/tags/cryptography/</link>
    <description>Recent content in cryptography on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jun 2020 15:42:53 -0400</lastBuildDate>
    
	<atom:link href="https://somesh-bhandarkar.github.io/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Des in python</title>
      <link>https://somesh-bhandarkar.github.io/post/des/</link>
      <pubDate>Sun, 14 Jun 2020 15:42:53 -0400</pubDate>
      
      <guid>https://somesh-bhandarkar.github.io/post/des/</guid>
      <description>A python program for DES
#!/usr/bin/env python3 # coding: utf-8 # Final Program # Name: Somesh Bhandarkar BookInitPermOrder = [58,50,42,34,26,18,10,2, 60,52,44,36,28,20,12,4, 62,54,46,38,30,22,14,6, 64,56,48,40,32,24,16,8, 57,49,41,33,25,17,9,1, 59,51,43,35,27,19,11,3, 61,53,45,37,29,21,13,5, 63,55,47,39,31,23,15,7] BookInvInitPermOrder = [40,8,48,16,56,24,64,32, 39,7,47,15,55,23,63,31, 38,6,46,14,54,22,62,30, 37,5,45,13,53,21,61,29, 36,4,44,12,52,20,60,28, 35,3,43,11,51,19,59,27, 34,2,42,10,50,18,58,26, 33,1,41,9,49,17,57,25] PC1 = [57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15, 7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4] PC2 = [14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2, 41,52,31,37,47,55,30,40,51,45,33,48, 44,49,39,56,34,53,46,42,50,36,29,32] E_TABLE = [32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17, 16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1] P = [16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25] def byteseq2binstr(byteseq): bitslist2 = [bin(int(b))[2:].</description>
    </item>
    
    <item>
      <title>Fiestel_cipher in python</title>
      <link>https://somesh-bhandarkar.github.io/post/fiestel_cipher/</link>
      <pubDate>Sun, 14 Jun 2020 15:38:42 -0400</pubDate>
      
      <guid>https://somesh-bhandarkar.github.io/post/fiestel_cipher/</guid>
      <description>This is simple approach for fiestel cipher
import random import hmac import hashlib def xor(byteseq1, byteseq2): l1 = [b for b in byteseq1] l2 = [b for b in byteseq2] l1xorl2 = [bytes([elem1^elem2]) for elem1,elem2 in zip(l1,l2)] result = b&amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>Caesar_cipher in python</title>
      <link>https://somesh-bhandarkar.github.io/post/caesar_cipher/</link>
      <pubDate>Sun, 14 Jun 2020 15:36:35 -0400</pubDate>
      
      <guid>https://somesh-bhandarkar.github.io/post/caesar_cipher/</guid>
      <description>This is a program of Caesar Cipher in python3.
#!/usr/bin/env python3 # Author: Somesh Bhandarkar # # # import sys def caesar_str_enc(plaintext, K): ciphertext=&amp;#34;&amp;#34; for ch in plaintext: encch = caesar_ch_enc(ch, K) ciphertext = ciphertext + encch return ciphertext def caesar_ch_enc(ch, K): if ch == &amp;#34; &amp;#34;: enc_char = &amp;#34; &amp;#34; return enc_char else: pt = ord(ch) - 97 coded_pt = int((pt + K) % 26) enc_char = chr(coded_pt + 97) return enc_char def caesar_str_dec(ciphertext, K): plaintext = &amp;#34;&amp;#34; for ch in ciphertext: decch = caesar_ch_dec(ch, K) plaintext = plaintext + decch return plaintext def caesar_ch_dec(ch, K): if ch == &amp;#34; &amp;#34;: dec_char = &amp;#34; &amp;#34; return dec_char else: ct = ord(ch) - 97 coded_ct = int((ct - K) % 26) dec_char = chr(coded_ct + 97) return dec_char def test_module(): K = int(sys.</description>
    </item>
    
  </channel>
</rss>